const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const fs = require('fs');
const path = require('path');

const token = process.env.TELEGRAM_BOT_TOKEN;

if (!token) {
    console.error('–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    console.log('–¢–µ–∫—É—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', process.env); // –î–ª—è –¥–µ–±–∞–≥–∞
}

console.log('–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å —Ç–æ–∫–µ–Ω–æ–º:', token.slice(0, 5) + '...'); // –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

const bot = new TelegramBot(token, { polling: true, request: {
    agentOptions: {
        keepAlive: true,
        family: 4
    },
    url: " https://api.telegram.org ",
}});

const motivations = [
    "–¢—ã –º–æ–∂–µ—à—å –±–æ–ª—å—à–µ, —á–µ–º –¥—É–º–∞–µ—à—å! üí™",
    "–ö–∞–∂–¥—ã–π –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –≤–µ–¥–µ—Ç –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏! üöÄ",
    "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏, –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è! üåü",
    "–ü–æ–º–Ω–∏, –¥–∞–∂–µ 5 –º–∏–Ω—É—Ç –º–æ–≥—É—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ç–≤–æ–π –¥–µ–Ω—å! ‚è≥",
    "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –∫–∞–∂–µ—Ç—Å—è! üí•",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ! üåà",
    "–¢—ã –¥–µ–ª–∞–µ—à—å —ç—Ç–æ —Ä–∞–¥–∏ —Å–µ–±—è, –ø—Ä–æ–¥–æ–ª–∂–∞–π! ‚ù§Ô∏è",
    "–ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º! üèÜ",
    "–¢—ã –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏, —á–µ–º –±—ã–ª –≤—á–µ—Ä–∞! üéØ",
    "–¢—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è, —è –≤ —Ç–µ–±—è –≤–µ—Ä—é! üåü"
];

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏
const DATA_FILE = path.join(__dirname, 'userData.json');

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadUserData() {
    try {
        if (fs.existsSync(DATA_FILE)) {
            const rawData = fs.readFileSync(DATA_FILE, 'utf-8');
            return JSON.parse(rawData);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    return {}; // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–µ—Ä–Ω—ë–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
function saveUserData(data) {
    fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2), 'utf-8');
    console.log('–§–∞–π–ª userData.json –æ–±–Ω–æ–≤–ª—ë–Ω!'); // –õ–æ–≥–∏—Ä—É–µ–º
    console.log(JSON.stringify(data, null, 2))
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userState
const userState = loadUserData();

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é confirmCompletion
function confirmCompletion(chatId) {
    if (!userState[chatId]) {
        userState[chatId] = { stopped: false, streak: 0, completedToday: false };
    }

    if (userState[chatId].completedToday) {
        bot.sendMessage(chatId, `–¢—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è! –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: ${userState[chatId].streak}`);
        return;
    }
    
    userState[chatId].stopped = true;
    userState[chatId].completedToday = true;
    userState[chatId].streak = (userState[chatId].streak || 0) + 1;
    
    saveUserData(userState); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è!
    
    bot.sendMessage(chatId, `–ú–æ–ª–æ–¥–µ—Ü! –°–µ–π—á–∞—Å —Ç–≤–æ–π —Å—Ç—Ä–∏–∫ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ${userState[chatId].streak}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º
function sendQuestion(chatId) {
    const randomMotivation = motivations[Math.floor(Math.random() * motivations.length)];
    const message = `${randomMotivation}\n\n–°–¥–µ–ª–∞–ª(–∞) –ª–∏ —Ç—ã —Å–µ–≥–æ–¥–Ω—è —Å–≤–æ–∏ 5 –º–∏–Ω—É—Ç?`;

    bot.sendMessage(chatId, message, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–î–∞', callback_data: 'yes' }],
                [{ text: '–ù–µ—Ç', callback_data: 'no' }]
            ],
            keyboard: [[{ text: '‚úÖ –Ø —Å–¥–µ–ª–∞–ª(–∞) 5 –º–∏–Ω—É—Ç' }]], // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç–≤–æ–∏—Ö 5 –º–∏–Ω—É—Ç–∞—Ö –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å 15:00 –¥–æ 24:00 (–ø–æ –£—Ñ–µ).

–ï—Å–ª–∏ —Ç—ã –≤—ã–ø–æ–ª–Ω–∏—à—å –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏ "–î–∞", –∏ —è –ø–µ—Ä–µ—Å—Ç–∞–Ω—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ï—Å–ª–∏ –Ω–µ—Ç, —è –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —á–µ—Ä–µ–∑ —á–∞—Å.

–¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /done.

–ù–∞—á–Ω–µ–º? üòä
    `;

    if (!userState[chatId]) {
        userState[chatId] = { stopped: false, streak: 0, completedToday: false };
    }

    bot.sendMessage(chatId, welcomeMessage, {
        reply_markup: {
            keyboard: [[{ text: '‚úÖ –Ø —Å–¥–µ–ª–∞–ª(–∞) 5 –º–∏–Ω—É—Ç' }]], // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /done
bot.onText(/\/done/, (msg) => {
    const chatId = msg.chat.id;
    confirmCompletion(chatId);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –æ–±—ã—á–Ω–æ–π –∫–Ω–æ–ø–∫–∏
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    if (text === '‚úÖ –Ø —Å–¥–µ–ª–∞–ª(–∞) 5 –º–∏–Ω—É—Ç') {
        confirmCompletion(chatId);
    }
});

bot.on("polling_error", (msg) => console.log(msg));

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
bot.on('callback_query', (query) => {
    const chatId = query.message.chat.id;
    const data = query.data;

    if (data === 'yes') {
        confirmCompletion(chatId);
    } else if (data === 'no') {
        userState[chatId].stopped = false;
        bot.sendMessage(chatId, '–Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ —á–µ—Ä–µ–∑ —á–∞—Å.');
    }
});

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π —á–∞—Å —Å 15:00 –¥–æ 24:00
cron.schedule('0 * 15-23 * * *', () => {
    Object.keys(userState).forEach(chatId => {
        if (!userState[chatId].stopped) {
            sendQuestion(chatId);
        }
    });
}, {
    timezone: "Asia/Yekaterinburg"
});

// –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç—Ä–∏–∫–∞ –≤ 00:00, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
cron.schedule('0 0 * * *', () => {
    Object.keys(userState).forEach(chatId => {
        if (!userState[chatId].completedToday) {
            userState[chatId].streak = 0;
            bot.sendMessage(chatId, '–¢—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞—á—É —Å–µ–≥–æ–¥–Ω—è. –¢–≤–æ–π —Å—Ç—Ä–∏–∫ —Å–±—Ä–æ—à–µ–Ω.');
        }
        userState[chatId].completedToday = false;
        userState[chatId].stopped = false;
    });
    saveUserData(userState);
}, {
    timezone: "Asia/Yekaterinburg"
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...');